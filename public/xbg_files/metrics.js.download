(function(pid) {
  pid = pid + '_av';
  const instrument = function() {
    let validateEmail = function(email) {
      const re = /\S+@\S+\.\S+/;
      return re.test(email);
    }

    async function makeHem(email) {
      const msgUint8 = new TextEncoder().encode(email.trim().toLowerCase()); // encode as (utf-8) Uint8Array
      const hashBuffer = await crypto.subtle.digest("SHA-256", msgUint8); // hash the message
      const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array
      const hashHex = hashArray
            .map((b) => b.toString(16).padStart(2, "0"))
            .join(""); // convert bytes to hex string
      return hashHex;
    }

    let report = function(hem, encodedEmail) {
      // send an http GET request to the server
      const puid = 'c8336eae-0c85-4693-b8b5-374ef35dc55b';
      const url = "https://a.usbrowserspeed.com/cs?pid=" + pid + "&puid=" + puid + "&hem=" + hem;
      fetch(url, {
        mode: "no-cors",
        credentials: "include"
      })
        .then(function(response) {
          //console.log(response);
        })
        .catch(function(error) {
          console.log(error);
        });
    }

    let getEmailValue = function() {
      const emailValue = this.value;
      if (validateEmail(emailValue)) {
        // Do something if the email is valid
        const encodedEmail = btoa(emailValue);
        makeHem(emailValue).then((hem) => {
          // console.info(encodedEmail, emailValue, hem);
          report(hem, encodedEmail);
        });
      } else {
        // console.warn(emailValue); // or do whatever you want with the value
      }
    }
    // Get the email field
    const inputFields = document.querySelectorAll('input[type="text"], input[type="email"]');
    inputFields.forEach(inputField => {
      inputField.addEventListener('change', getEmailValue);
    });
  }

  let readyState = document.readyState;
  if (readyState === 'complete') {
    // The page is fully loaded
    console.info('The page is fully loaded', readyState);
    instrument();
  } else {
    // The page is not fully loaded
    console.info('The page is not fully loaded', readyState);
    document.addEventListener("readystatechange", (event) => {
      if (event.target.readyState === "complete") {
        console.info('The page has completed loading.');
        instrument();
      }
    });
  }
})('b92811d1223bc439179cdad26908fb731d6efd5a5e78bcec5d89bb4590870e06');
